[gd_scene load_steps=24 format=3 uid="uid://7ds6ylww2hrw"]

[ext_resource type="PackedScene" uid="uid://cl0e0qexuj16p" path="res://Spaceship.tscn" id="1_apsdx"]
[ext_resource type="Script" path="res://e_2.gd" id="2_6eidn"]
[ext_resource type="ArrayMesh" uid="uid://dfe24cojtvwri" path="res://Assets/e2.obj" id="2_pdalp"]
[ext_resource type="PackedScene" uid="uid://tlk6wln8t41o" path="res://e1p.tscn" id="3_fdkd1"]
[ext_resource type="Shader" path="res://2.gdshader" id="5_eyoap"]
[ext_resource type="Shader" path="res://pixel.gdshader" id="6_jnehh"]

[sub_resource type="ViewportTexture" id="ViewportTexture_t4x4t"]
viewport_path = NodePath("SpaceShip")

[sub_resource type="ViewportTexture" id="ViewportTexture_4asqu"]
viewport_path = NodePath("SpaceShip")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_maggp"]
shader = ExtResource("5_eyoap")
shader_parameter/color = Color(0.700896, 0.0316395, 0.0175448, 1)
shader_parameter/thickness = 10.0
shader_parameter/tolerance = 0.0
shader_parameter/diagonals = true
shader_parameter/rounded = true

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8vbj5"]
shader = ExtResource("6_jnehh")
shader_parameter/amount = 30.0

[sub_resource type="Shader" id="Shader_ieoni"]
code = "shader_type canvas_item;
uniform sampler2D text_map;

uniform float scale_factor = 0.5; // Adjust how much smaller the edges should be



uniform sampler2D dissolve_texture : source_color,repeat_enable;
uniform sampler2D texture2:repeat_enable;
uniform float dissolve_value : hint_range(0,1);
uniform float burn_size: hint_range(0.0, 1.0, 0.01);
uniform vec4 burn_color: source_color;
uniform float speed = 1.0;
uniform vec2 dissolve_movement_direction = vec2(1.0, 1.0); // Direction to move the dissolve texture

uniform vec2 second_dissolve_directoin=vec2(-1.2,-1.4);
void fragment(){
	float t1=texture(dissolve_texture,UV+dissolve_movement_direction*TIME*speed).r;
	float t2=texture(texture2,UV+second_dissolve_directoin*TIME*speed).r;
	float energy=t1*t2;
	vec4 energy_texture=vec4(energy,energy,energy,1);
    // Create animated UVs and ensure they wrap properly
    vec2 animated_uv = fract(UV + TIME * speed * dissolve_movement_direction);

    vec4 main_texture = texture(TEXTURE, UV);

    vec4 noise_texture = energy_texture;


	// This is needed to avoid keeping a small burn_color dot with dissolve being 0 or 1
	float burn_size_step = burn_size * step(0.001, dissolve_value) * step(dissolve_value, 0.999);
	float threshold = smoothstep(noise_texture.x - burn_size_step, noise_texture.x, dissolve_value);
	float border = smoothstep(noise_texture.x, noise_texture.x + burn_size_step, dissolve_value);

	COLOR.a *= threshold;
	COLOR.rgb = mix(burn_color.rgb, main_texture.rgb, border);
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_75pbw"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_oi2iq"]
seamless = true
noise = SubResource("FastNoiseLite_75pbw")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_rm477"]
frequency = 0.0044

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_vyufx"]
seamless = true
noise = SubResource("FastNoiseLite_rm477")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_tfyuj"]
resource_local_to_scene = true
shader = SubResource("Shader_ieoni")
shader_parameter/scale_factor = 0.5
shader_parameter/dissolve_value = 1.0
shader_parameter/burn_size = 0.06
shader_parameter/burn_color = Color(0.258824, 0.564706, 0.772549, 0.52549)
shader_parameter/speed = 0.3
shader_parameter/dissolve_movement_direction = Vector2(-5, 8)
shader_parameter/second_dissolve_directoin = Vector2(-1, 0.3)
shader_parameter/text_map = SubResource("NoiseTexture2D_oi2iq")
shader_parameter/texture2 = SubResource("NoiseTexture2D_vyufx")

[sub_resource type="ViewportTexture" id="ViewportTexture_xama8"]
viewport_path = NodePath("SubViewport")

[sub_resource type="Shader" id="Shader_dlfin"]
code = "shader_type canvas_item;


uniform bool stepify = true;
uniform float value : hint_range(0.0, 1.0) = 1.0;
uniform int count = 1;
uniform vec2 margin;
uniform float shear_angle : hint_range(-1.0, 1.0) = 0.0; // -90 to 90 degrees
uniform sampler2D gradient_x : source_color;
uniform sampler2D gradient_y : source_color;
uniform bool use_value_gradient = false;
uniform bool invert = false;


vec4 get_gradient_color(sampler2D src, float position) {
	position = clamp(position, 0.01, 0.99); // Color at 0.0 and 1.0 get interpolated by both end
    return texture(src, vec2(position, 0.5));
}

float square_shape(vec2 uv, vec2 size) {
	vec2 bl = step((1.0-size)/2.0, uv); // bottom-left
	vec2 tr = step((1.0-size)/2.0, 1.0-uv); // top-right
	return bl.x * bl.y * tr.x * tr.y;
}

vec2 segmented_bar(vec2 uv) {
	float shape = 0.0;
	float bar_count = float(count);
	float bar_size = 1.0/bar_count;
	float separation = margin.x;
	float separation_width = separation * bar_size;
	float bar_value = 0.0;
	for (int i=0;i<count;i++) {
		float index_value = float(i+1) / float(count);
		
		if (index_value > value) {
			// Ceil
			if (value < float(i) * bar_size || value <= 0.0) {
				continue;
			}
		}
		
		vec2 uv4 = uv;
		vec2 size4 = vec2(bar_size, 1.0-margin.y);
		//size4.x = bar_size;
		uv4.x = uv4.x - (bar_size/2.0) + 0.5;
		uv4.x -= bar_size * float(i); // Offset
		size4.x -= separation_width;
		shape += square_shape(uv4, size4);
		bar_value = index_value;
	}
	return vec2(shape, bar_value);
}

float snap(float original, float numerator, float denominator)
{
    return round(original * denominator / numerator) * numerator / denominator;
}

vec3 hsv_to_rgb(vec3 color) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(color.xxx + K.xyz) * 6.0 - K.www);
	return color.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), color.y);
}

float round_place(float num,float places) {
	return (round(num*pow(10,places))/pow(10,places));
}

float map_range(float min1, float max1, float min2, float max2, float v) {
	float p = (v - min1) / (max1 - min1);
	return p * (max2 - min2) + min2;
}

void fragment() {
	vec2 uv = UV;
	
	float angle = 1.571 + (shear_angle * PI/4.0);
	float shear_value = (cos(angle)/sin(angle));
	float shear = shear_value * uv.y;
	uv.x = uv.x + shear;
	uv.x -= shear_value/2.0;
	
	uv.x *= 1.0+abs(shear_value);
	uv.x -= abs(shear_value)/2.0;
	
	float bar_count = float(count);
	float bar_size = 1.0/bar_count;
	float separation_width = margin.x * bar_size;
	
	vec2 shape = segmented_bar(uv);
	vec4 gradient_color = vec4(0.0);
	float gradient_x_pos = uv.x;
	if (use_value_gradient) {
		gradient_x_pos = value;
	}
	vec4 gradient_color_x = get_gradient_color(gradient_x, gradient_x_pos);
	if (stepify) {
		float step_size = float(count)/2.0;
		gradient_color_x = get_gradient_color(gradient_x, snap(gradient_x_pos, 1.0, step_size));
	}
	else {
		shape.x *= step(uv.x, value);
	}
	
	float y = map_range(0.5-(1.0-margin.y)/2.0, 0.5+(1.0-margin.y)/2.0, 0.0, 1.0, uv.y);
	if (invert) {
		y = uv.y;
		shape.x = 1.0 - shape.x;
		shape.x *= step(0.0, y);
		shape.x *= step(y, 1.0);
	}
	vec4 gradient_color_y = get_gradient_color(gradient_y, y);
	gradient_color += gradient_color_x;
	gradient_color = mix(gradient_color_x, gradient_color_y, gradient_color_y.a);
	
	
	
	COLOR = vec4(gradient_color.rgb, shape.x);
}
"

[sub_resource type="Gradient" id="Gradient_b4mty"]

[sub_resource type="GradientTexture1D" id="GradientTexture1D_du16p"]
gradient = SubResource("Gradient_b4mty")

[sub_resource type="Gradient" id="Gradient_ey25t"]
offsets = PackedFloat32Array(0, 0.474178, 1)
colors = PackedColorArray(0, 0, 0, 1, 0.592157, 0, 0, 1, 0, 0, 0, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_qsi8q"]
gradient = SubResource("Gradient_ey25t")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_xac6l"]
resource_local_to_scene = true
shader = SubResource("Shader_dlfin")
shader_parameter/stepify = true
shader_parameter/value = 0.436
shader_parameter/count = 4
shader_parameter/margin = Vector2(0.26, 0.41)
shader_parameter/shear_angle = -0.274
shader_parameter/use_value_gradient = true
shader_parameter/invert = false
shader_parameter/gradient_x = SubResource("GradientTexture1D_du16p")
shader_parameter/gradient_y = SubResource("GradientTexture1D_qsi8q")

[node name="Node2D" instance=ExtResource("1_apsdx")]
script = ExtResource("2_6eidn")
difficulty = 1
shoot_frequency = 2.0
projectile = ExtResource("3_fdkd1")
hp = 2.0

[node name="CollisionShape2D" parent="hitbox" index="0"]
position = Vector2(-8, -40)

[node name="origin" parent="SpaceShip" index="0"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4, 0, 0)

[node name="Spaceship" parent="SpaceShip/origin" index="2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0939965, -0.190923, -0.14111)
mesh = ExtResource("2_pdalp")

[node name="Sprite2D" parent="." index="3"]
texture = SubResource("ViewportTexture_t4x4t")

[node name="MultiViewPort" parent="." index="4"]
position = Vector2(-19, 6)
texture = SubResource("ViewportTexture_4asqu")
shader_array = Array[ShaderMaterial]([SubResource("ShaderMaterial_maggp"), SubResource("ShaderMaterial_8vbj5")])

[node name="Raycast" parent="MultiViewPort/rot" index="0"]
visible = false

[node name="PArticles" parent="MultiViewPort/rot" index="1"]
visible = false

[node name="particles_boost" parent="MultiViewPort/rot" index="2"]
visible = false

[node name="laser" parent="MultiViewPort/rot" index="3"]
visible = false

[node name="Shootpoint" parent="MultiViewPort/rot" index="4"]
position = Vector2(11, 265)

[node name="Shoot_timer" type="Timer" parent="." index="5"]
autostart = true

[node name="Shield" parent="." index="6"]
visible = false
material = SubResource("ShaderMaterial_tfyuj")
texture = SubResource("ViewportTexture_xama8")

[node name="Progress" parent="." index="7"]
material = SubResource("ShaderMaterial_xac6l")

[connection signal="timeout" from="Shoot_timer" to="." method="_on_shoot_timer_timeout"]
