[gd_scene load_steps=25 format=3 uid="uid://bf8dn2qifx734"]

[ext_resource type="PackedScene" uid="uid://7ds6ylww2hrw" path="res://e2.tscn" id="1_win2h"]
[ext_resource type="Script" path="res://laser_enemy.gd" id="2_b856g"]
[ext_resource type="ArrayMesh" uid="uid://ivo812f1sdqb" path="res://Assets/laser_ship.obj" id="2_hm1vl"]
[ext_resource type="Texture2D" uid="uid://b8hwqggah6lmc" path="res://Assets/Effects/Cryo_Explosion/c1.png" id="4_62fwp"]

[sub_resource type="ViewportTexture" id="ViewportTexture_ulsxq"]
viewport_path = NodePath("SpaceShip")

[sub_resource type="ViewportTexture" id="ViewportTexture_xhj20"]
viewport_path = NodePath("SpaceShip")

[sub_resource type="Gradient" id="Gradient_d3sbl"]
colors = PackedColorArray(6, 1, 1, 1, 1, 1, 1, 0)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_gdino"]
gradient = SubResource("Gradient_d3sbl")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_70yxt"]
particle_flag_disable_z = true
emission_shape_scale = Vector3(1.175, 1, 1)
emission_shape = 3
emission_box_extents = Vector3(100.165, 1, 1)
direction = Vector3(0, 1, 0)
spread = 12.273
initial_velocity_min = 121.21
initial_velocity_max = 313.13
gravity = Vector3(0, 0, 0)
scale_min = 0.2
scale_max = 0.6
color_ramp = SubResource("GradientTexture1D_gdino")

[sub_resource type="Shader" id="Shader_dp6dy"]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/energy-beams

This shader is under CC0 license. Feel free to use, improve and
change this shader according to your needs and consider sharing
the modified result to godotshaders.com.
*/

shader_type canvas_item;
render_mode blend_add; // Remove this if you want to use HDR glow instead (use \"Glow\" and \"Outline Glow\" sliders)

uniform int beams = 2; // How many beams the energy field should have

uniform float energy = 3.0; // How much the beams will travel up and down
uniform int roughness : hint_range(1, 10) = 3; // How compact the noise texture will be
uniform int frequency = 10; // Amount of \"ripples\" in the beams

uniform float speed = 1.0; // Animation speed
uniform float thickness : hint_range(0.0, 0.1) = 0.006; // Thickness of the main beam
uniform float outline_thickness : hint_range(0.0, 0.1) = 0.03; //Thickness of the outline color
uniform float beam_difference : hint_range(0.0, 1.0) = 0.0; // The thickness difference between the main beam and the other, if there are more than one beam. The closer to 1 the smaller the thickness difference.

uniform float glow : hint_range(0.0, 3.0) = 0.0; // Use together with WorldEnvironment's Glow feature
uniform float outline_glow : hint_range(0.0, 3.0) = 0.0;

uniform vec4 color = vec4(0.91, 1.0, 1.0, 1.0);
uniform vec4 outline_color  = vec4(0.5, 1.0, 0.96, 1.0);

uniform float progress : hint_range(0.0, 1.0) = 1.0;

uniform float y_offset : hint_range (-0.5, 0.5) = 0.0; // Position of the beam
uniform float fixed_edge_size : hint_range(0.0, 0.5) = 0.05; // How close to the edge should the beam be still before the animatino starts
uniform vec2 noise_scale = vec2(1.0); // If the object (for example the ColorRect or Sprite node) is compressed use this to compensate for the noise texture being compressed.

float random(vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) *
            43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    // Four corners in 2D of a tile
    float a = random(uv_index);
    float b = random(uv_index + vec2(1.0, 0.0));
    float c = random(uv_index + vec2(0.0, 1.0));
    float d = random(uv_index + vec2(1.0, 1.0));

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix(a, b, blur.x) +
            (c - a) * blur.y * (1.0 - blur.x) +
            (d - b) * blur.x * blur.y;
}

float fbm(vec2 uv, float time) {
    int octaves = roughness;
    float amp = 0.01 * energy * progress;
    float freq = float(frequency);
	float value = 0.0;

    for(int i = 0; i < octaves; i++) {
        value += amp * noise(freq * vec2(uv.x, uv.y + time));
        amp *= 0.5;
        freq *= 2.0;
    }
    return value;
}

vec4 difference(vec4 base, vec4 blend){
	return abs(base - blend);
}

vec4 bolt(vec2 uv, float time, float i)
{
	// Setup the beam locking to the edges.
	float falloff = smoothstep(0.0, fixed_edge_size, uv.x) * smoothstep(0.0, fixed_edge_size, 1.0 - uv.x);

	// Use Fractal Brownian Motion to create a \"cloud texture\" and use Difference blend mode to make the beam
	vec4 clouds = vec4(fbm((uv + vec2(i) ) * noise_scale, time * speed)) * falloff;
	vec4 diff_clouds = difference(clouds, vec4(uv.y - 0.5 + y_offset + (uv.y * falloff * 0.02 * energy * progress)));

	// Create a new noise to mask the beams on low \"progress\" values. To make a \"turn-off\" effect more visually interesting.
	vec4 clouds2 = vec4(fbm((uv * 2.0) * noise_scale, time * 1.)) * 5.0;
	diff_clouds += smoothstep(0.0, 0.8, clouds2) * 0.1 * (1.-progress);

	// Set thickness of the beams. First beam is the Thickness size and all following beams are sized with beam_difference
	float thickness2 =  1. - ( thickness / (min(i + beam_difference, 1.0) + (1.0-beam_difference))) * progress ;
	vec4 beam = clamp(smoothstep(thickness2, thickness2 + 0.005 * progress, 1.0 - diff_clouds), vec4(0.0), vec4(1.0));

	//Set the beam outlines
	vec4 beam_outline;
	float outline = thickness2 - (outline_thickness * progress);
	beam_outline = clamp(smoothstep(outline, outline + 0.04, 1.0 - diff_clouds), 0.0, 1.0);
	beam_outline = clamp(beam_outline - beam, 0.0, 1.0);

	// Merge the beam and the outline and return to the fragment function
	return (beam * (color + vec4(glow, glow, glow, 0.))) + (beam_outline * (outline_color + vec4(outline_glow, outline_glow, outline_glow, 0.)));
}

void fragment()
{
	vec4 beam = vec4(0.0);

	for (int i = 0; i < beams; i++){
		beam = max(beam, bolt(UV, TIME, float(i)));
	}

	COLOR = beam;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ctey1"]
resource_local_to_scene = true
shader = SubResource("Shader_dp6dy")
shader_parameter/beams = 1
shader_parameter/energy = 9.75
shader_parameter/roughness = 10
shader_parameter/frequency = 10
shader_parameter/speed = -0.895
shader_parameter/thickness = 0.026
shader_parameter/outline_thickness = 0.035
shader_parameter/beam_difference = 1.0
shader_parameter/glow = 3.0
shader_parameter/outline_glow = 0.0
shader_parameter/color = Vector4(0.91, 1, 1, 1)
shader_parameter/outline_color = Vector4(0.5, 1, 0.96, 1)
shader_parameter/progress = 0.0
shader_parameter/y_offset = 0.0
shader_parameter/fixed_edge_size = 0.05
shader_parameter/noise_scale = Vector2(1, 1)

[sub_resource type="Shader" id="Shader_ieoni"]
code = "shader_type canvas_item;
uniform sampler2D text_map;

uniform float scale_factor = 0.5; // Adjust how much smaller the edges should be



uniform sampler2D dissolve_texture : source_color,repeat_enable;
uniform sampler2D texture2:repeat_enable;
uniform float dissolve_value : hint_range(0,1);
uniform float burn_size: hint_range(0.0, 1.0, 0.01);
uniform vec4 burn_color: source_color;
uniform float speed = 1.0;
uniform vec2 dissolve_movement_direction = vec2(1.0, 1.0); // Direction to move the dissolve texture

uniform vec2 second_dissolve_directoin=vec2(-1.2,-1.4);
void fragment(){
	float t1=texture(dissolve_texture,UV+dissolve_movement_direction*TIME*speed).r;
	float t2=texture(texture2,UV+second_dissolve_directoin*TIME*speed).r;
	float energy=t1*t2;
	vec4 energy_texture=vec4(energy,energy,energy,1);
    // Create animated UVs and ensure they wrap properly
    vec2 animated_uv = fract(UV + TIME * speed * dissolve_movement_direction);

    vec4 main_texture = texture(TEXTURE, UV);

    vec4 noise_texture = energy_texture;


	// This is needed to avoid keeping a small burn_color dot with dissolve being 0 or 1
	float burn_size_step = burn_size * step(0.001, dissolve_value) * step(dissolve_value, 0.999);
	float threshold = smoothstep(noise_texture.x - burn_size_step, noise_texture.x, dissolve_value);
	float border = smoothstep(noise_texture.x, noise_texture.x + burn_size_step, dissolve_value);

	COLOR.a *= threshold;
	COLOR.rgb = mix(burn_color.rgb, main_texture.rgb, border);
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_75pbw"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_oi2iq"]
seamless = true
noise = SubResource("FastNoiseLite_75pbw")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_rm477"]
frequency = 0.0044

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_vyufx"]
seamless = true
noise = SubResource("FastNoiseLite_rm477")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_yg1fn"]
resource_local_to_scene = true
shader = SubResource("Shader_ieoni")
shader_parameter/scale_factor = 0.5
shader_parameter/dissolve_value = 1.0
shader_parameter/burn_size = 0.06
shader_parameter/burn_color = Color(0.258824, 0.564706, 0.772549, 0.52549)
shader_parameter/speed = 0.3
shader_parameter/dissolve_movement_direction = Vector2(-5, 8)
shader_parameter/second_dissolve_directoin = Vector2(-1, 0.3)
shader_parameter/text_map = SubResource("NoiseTexture2D_oi2iq")
shader_parameter/texture2 = SubResource("NoiseTexture2D_vyufx")

[sub_resource type="ViewportTexture" id="ViewportTexture_xg11y"]
viewport_path = NodePath("SubViewport")

[sub_resource type="Shader" id="Shader_dlfin"]
code = "shader_type canvas_item;


uniform bool stepify = true;
uniform float value : hint_range(0.0, 1.0) = 1.0;
uniform int count = 1;
uniform vec2 margin;
uniform float shear_angle : hint_range(-1.0, 1.0) = 0.0; // -90 to 90 degrees
uniform sampler2D gradient_x : source_color;
uniform sampler2D gradient_y : source_color;
uniform bool use_value_gradient = false;
uniform bool invert = false;


vec4 get_gradient_color(sampler2D src, float position) {
	position = clamp(position, 0.01, 0.99); // Color at 0.0 and 1.0 get interpolated by both end
    return texture(src, vec2(position, 0.5));
}

float square_shape(vec2 uv, vec2 size) {
	vec2 bl = step((1.0-size)/2.0, uv); // bottom-left
	vec2 tr = step((1.0-size)/2.0, 1.0-uv); // top-right
	return bl.x * bl.y * tr.x * tr.y;
}

vec2 segmented_bar(vec2 uv) {
	float shape = 0.0;
	float bar_count = float(count);
	float bar_size = 1.0/bar_count;
	float separation = margin.x;
	float separation_width = separation * bar_size;
	float bar_value = 0.0;
	for (int i=0;i<count;i++) {
		float index_value = float(i+1) / float(count);
		
		if (index_value > value) {
			// Ceil
			if (value < float(i) * bar_size || value <= 0.0) {
				continue;
			}
		}
		
		vec2 uv4 = uv;
		vec2 size4 = vec2(bar_size, 1.0-margin.y);
		//size4.x = bar_size;
		uv4.x = uv4.x - (bar_size/2.0) + 0.5;
		uv4.x -= bar_size * float(i); // Offset
		size4.x -= separation_width;
		shape += square_shape(uv4, size4);
		bar_value = index_value;
	}
	return vec2(shape, bar_value);
}

float snap(float original, float numerator, float denominator)
{
    return round(original * denominator / numerator) * numerator / denominator;
}

vec3 hsv_to_rgb(vec3 color) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(color.xxx + K.xyz) * 6.0 - K.www);
	return color.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), color.y);
}

float round_place(float num,float places) {
	return (round(num*pow(10,places))/pow(10,places));
}

float map_range(float min1, float max1, float min2, float max2, float v) {
	float p = (v - min1) / (max1 - min1);
	return p * (max2 - min2) + min2;
}

void fragment() {
	vec2 uv = UV;
	
	float angle = 1.571 + (shear_angle * PI/4.0);
	float shear_value = (cos(angle)/sin(angle));
	float shear = shear_value * uv.y;
	uv.x = uv.x + shear;
	uv.x -= shear_value/2.0;
	
	uv.x *= 1.0+abs(shear_value);
	uv.x -= abs(shear_value)/2.0;
	
	float bar_count = float(count);
	float bar_size = 1.0/bar_count;
	float separation_width = margin.x * bar_size;
	
	vec2 shape = segmented_bar(uv);
	vec4 gradient_color = vec4(0.0);
	float gradient_x_pos = uv.x;
	if (use_value_gradient) {
		gradient_x_pos = value;
	}
	vec4 gradient_color_x = get_gradient_color(gradient_x, gradient_x_pos);
	if (stepify) {
		float step_size = float(count)/2.0;
		gradient_color_x = get_gradient_color(gradient_x, snap(gradient_x_pos, 1.0, step_size));
	}
	else {
		shape.x *= step(uv.x, value);
	}
	
	float y = map_range(0.5-(1.0-margin.y)/2.0, 0.5+(1.0-margin.y)/2.0, 0.0, 1.0, uv.y);
	if (invert) {
		y = uv.y;
		shape.x = 1.0 - shape.x;
		shape.x *= step(0.0, y);
		shape.x *= step(y, 1.0);
	}
	vec4 gradient_color_y = get_gradient_color(gradient_y, y);
	gradient_color += gradient_color_x;
	gradient_color = mix(gradient_color_x, gradient_color_y, gradient_color_y.a);
	
	
	
	COLOR = vec4(gradient_color.rgb, shape.x);
}
"

[sub_resource type="Gradient" id="Gradient_b4mty"]

[sub_resource type="GradientTexture1D" id="GradientTexture1D_du16p"]
gradient = SubResource("Gradient_b4mty")

[sub_resource type="Gradient" id="Gradient_ey25t"]
offsets = PackedFloat32Array(0, 0.474178, 1)
colors = PackedColorArray(0, 0, 0, 1, 0.592157, 0, 0, 1, 0, 0, 0, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_qsi8q"]
gradient = SubResource("Gradient_ey25t")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8qhua"]
resource_local_to_scene = true
shader = SubResource("Shader_dlfin")
shader_parameter/stepify = true
shader_parameter/value = 0.436
shader_parameter/count = 4
shader_parameter/margin = Vector2(0.26, 0.41)
shader_parameter/shear_angle = -0.274
shader_parameter/use_value_gradient = true
shader_parameter/invert = false
shader_parameter/gradient_x = SubResource("GradientTexture1D_du16p")
shader_parameter/gradient_y = SubResource("GradientTexture1D_qsi8q")

[node name="Node2D" instance=ExtResource("1_win2h")]
script = ExtResource("2_b856g")
shoot_frequency = 0.0
show_particles = true
projectile = null
hp = 3.0

[node name="Spaceship" parent="SpaceShip/origin" index="2"]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, -0.0939965, -0.190923, -0.14111)
mesh = ExtResource("2_hm1vl")

[node name="Sprite2D" parent="." index="3"]
texture = SubResource("ViewportTexture_ulsxq")

[node name="MultiViewPort" parent="." index="4"]
texture = SubResource("ViewportTexture_xhj20")

[node name="rot" parent="MultiViewPort" index="0"]
rotation = 3.14159

[node name="Raycast" parent="MultiViewPort/rot" index="0"]
visible = true
position = Vector2(-13, -5)

[node name="CollisionShape2D" parent="MultiViewPort/rot/Raycast" index="0"]
position = Vector2(-1.99357, -2530)

[node name="PArticles" parent="MultiViewPort/rot" index="1"]
visible = true

[node name="shiny" parent="MultiViewPort/rot/PArticles" index="0"]
position = Vector2(43.9997, -36)
amount = 330
process_material = SubResource("ParticleProcessMaterial_70yxt")
texture = ExtResource("4_62fwp")
trail_lifetime = 1.12
trail_sections = 2

[node name="shiny2" parent="MultiViewPort/rot/PArticles" index="1"]
visible = false

[node name="smoke2" parent="MultiViewPort/rot/PArticles" index="2"]
visible = false

[node name="smoke3" parent="MultiViewPort/rot/PArticles" index="3"]
visible = false

[node name="laser" parent="MultiViewPort/rot" index="3"]
material = SubResource("ShaderMaterial_ctey1")
position = Vector2(1.99998, -258)

[node name="Shield" parent="." index="6"]
material = SubResource("ShaderMaterial_yg1fn")
texture = SubResource("ViewportTexture_xg11y")

[node name="Progress" parent="." index="7"]
material = SubResource("ShaderMaterial_8qhua")
